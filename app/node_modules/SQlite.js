var _=require('underscore');
var sqlite3 = require('sqlite3').verbose();



function SQlite(databaseName) {
    db= new sqlite3.Database('chain.sqlite3');
}


SQlite.prototype.find= function(model, query, callback) {
    var sqlstring="SELECT * FROM ";
    var Qobj={};
    sqlstring=sqlstring+model;
    if(!_.isEmpty(query)){
       sqlstring=sqlstring+" WHERE ";
    }
    var t=0;
    _.each(query, function (value, key) {
        if (typeof value === "string" || typeof value==="number") {
            console.log("it is a key value pair");
           // value.toString();
            console.log(value.toString());
            if (t === 0) {
                sqlstring=sqlstring+" " +key+" ="+" $"+key ;
                t= 1;
            }
            else{
                sqlstring=sqlstring+" AND " +key+" ="+" $"+key ;
            }

            Object.defineProperty(query, "$"+key, Object.getOwnPropertyDescriptor(query, key));

            delete query[key];
            console.log(query);

        }
        else if(_.isArray(value)){
            console.log("it is an IN query that is perform an OR on each query");

        }
    });
    //query={$info:"Ipsum 0"};
   // console.log(sqlstring);
        db.all(sqlstring,query, function (err, row) {
            if (err) {
                callback(err, null)
            }
            else{
                callback(null, row);
            }
        });


        db.close();

}



SQlite.prototype.update=function(model, query, values, callback) {
    var sqlstring=" UPDATE ";
    var Qobj={};
    sqlstring=sqlstring+model+ " SET " ;
 /*   if(!_.isEmpty(query)){
        sqlstring=sqlstring+" WHERE ";
    }*/
    var qString=" WHERE ";

    var t=0;
    _.each(query, function (value, key) {
        if (typeof value === "string" || typeof value==="number") {
            console.log("it is a key value pair");
            // value.toString();
            console.log(value.toString());
            if (t === 0) {
                qString=qString+" " +key+" ="+" $"+key ;
                sqlstring=sqlstring+" "+key+" ="+"$up"+key;
                t= 1;
            }
            else{
                qString=qString+" AND " +key+" ="+" $up"+key ;
                sqlstring=sqlstring+" "+key+" ="+"$"+key;
            }

            Object.defineProperty(query, "$"+key, Object.getOwnPropertyDescriptor(query, key));
            Object.defineProperty(query, "$up"+key, Object.getOwnPropertyDescriptor(values, key));
            delete query[key];
            //console.log(query);

        }
        else if(_.isArray(value)){
            console.log("it is an IN query that is perform an OR on each query");

        }
    });
    //query={$info:"Ipsum 0"};
    // console.log(sqlstring);
    console.log(sqlstring+qString);
    console.log(query);
    db.run(sqlstring+qString,query, function (err, changes) {
        if (err) {
            callback(err, null  );
        }
        else{
           // console.log("the number of items changed" +this.changes)
            callback(null, this.changes);
        }
    });

}


SQlite.prototype.destroy=function(model, query, callback) {
    var sqlstring="DELETE  FROM ";
    var Qobj={};
    sqlstring=sqlstring+model;
    if(!_.isEmpty(query)){
        sqlstring=sqlstring+" WHERE ";
    }
    var t=0;
    _.each(query, function (value, key) {
        if (typeof value === "string" || typeof value==="number") {
            console.log("it is a key value pair");
            // value.toString();
            console.log(value.toString());
            if (t === 0) {
                sqlstring=sqlstring+" " +key+" ="+" $"+key ;
                t= 1;
            }
            else{
                sqlstring=sqlstring+" AND " +key+" ="+" $"+key ;
            }

            Object.defineProperty(query, "$"+key, Object.getOwnPropertyDescriptor(query, key));

            delete query[key];
            console.log(query);

        }
        else if(_.isArray(value)){
            console.log("it is an IN query that is perform an OR on each query");

        }
    });
    //query={$info:"Ipsum 0"};
    // console.log(sqlstring);
    db.run(sqlstring,query, function (err, changes) {
        if (err) {
            callback(err, null)
        }
        else{
            callback(null, this.changes);
        }
    });

};

