var _  = require('underscore');
var sqlite3 = require('sqlite3').verbose();



function SQlite (databaseName) {
    db  =  new sqlite3.Database('chain.sqlite3');
}

SQlite.prototype.find  =  function (model, query, callback) {
    var sqlstring  = 'SELECT * FROM ';
    sqlstring +=  model;

    if (!_.isEmpty(query)) {sqlstring = sqlstring  + ' WHERE ';
    }
    var t  = 0;
    _.each(query, function (value, key) {
        if (typeof value === 'string' || typeof value === 'number') {

            if (t === 0) {
                sqlstring  +=  ' '  +  key + ' = ' + ' $' + key ;
                t = 1;
            } else {sqlstring = sqlstring + ' AND ' + key + ' = ' + ' $' + key ;}
            Object.defineProperty(query, '$' + key,
                Object.getOwnPropertyDescriptor(query, key));
            delete query[key];
        }
    });

    db.all(sqlstring, query, function (err, row) {
            if (err) {callback(err, null)} else { callback(null, row);}});
    db.close();
};

SQlite.prototype.update  = function (model, query, values, callback) {
    var sqlstring  = ' UPDATE ';
    sqlstring  += model +  ' SET ' ;
    var qString  = ' WHERE ';
    var t  = 0;
    _.each(query, function (value, key) {

        if (typeof value === 'string' || typeof value === 'number') {

            if (t === 0) {
                qString  += ' '  + key + ' =' + ' $' + key ;
                sqlstring  += ' ' + key + ' =' + '$up' + key;
                t = 1;
            } else {
                qString  += ' AND '  + key + ' =' + ' $up' + key ;
                sqlstring  += ' ' + key + ' =' + '$' + key;
            }
            Object.defineProperty(query, '$' + key,
                Object.getOwnPropertyDescriptor(query, key));
            Object.defineProperty(query, '$up' + key,
                Object.getOwnPropertyDescriptor(values, key));
            delete query[key];
        }
    });

    db.run(sqlstring + qString, query, function (err, changes) {

        if (err) {
            callback(err, null  );
        } else {
            callback(null, this.changes);
        }
    });
};

SQlite.prototype.destroy  = function (model, query, callback) {
    var sqlstring  = 'DELETE  FROM ';
    sqlstring += model;

    if (!_.isEmpty(query)) {
        sqlstring  += ' WHERE ';
    }
    var t  = 0;
    _.each(query, function (value, key) {
        if (typeof value === 'string' || typeof value === 'number') {
            if (t === 0) {
                sqlstring += ' '  + key + ' =' + ' $' + key ;
                t = 1;
            } else {
                sqlstring += ' AND '  + key + ' =' + ' $' + key ;
            }
            Object.defineProperty(query, '$' + key, Object.getOwnPropertyDescriptor(query, key));
            delete query[key];
        }
    });
    db.run(sqlstring, query, function (err, changes) {
        if (err) {
            callback(err, null)
        } else {
            callback(null, this.changes);
        }
    });
};

module.exports.Database=SQlite;